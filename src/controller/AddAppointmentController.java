/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package controller;

import database_CRUD.AppointmentsCRUD;
import java.io.IOException;
import java.net.URL;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.format.DateTimeParseException;
import java.util.Locale;
import java.util.Optional;
import java.util.ResourceBundle;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.Insets;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.scene.text.Font;
import model.Appointments;
import model.Contacts;
import model.Customers;
import model.DataHolder;
import model.Users;

/**
 * This is an FXML Controller class which provides functionality to the Add 
 * Appointment screen (the Add Appointment FXML file). 
 *
 * @author Alano Peirce
 */
public class AddAppointmentController implements Initializable {
    /**
     * This is the header of the Add Appointment page - it reads 
     * "ADD APPOINTMENT". 
     */
    @FXML
    private Label addAppointmentLabel;
    /**
     * This is the header text that precedes the appointment ID text field. 
     */
    @FXML
    private Label identificationNumberLabel;
    /**
     * This is the text field where the user would input an appointment ID for 
     * the new appointment they are creating; however, because the appointment 
     * IDs are currently auto-generated by the database, this text field is 
     * disabled and users cannot input anything into it. 
     */
    @FXML
    private TextField apptIdTextField;
    /**
     * This is the header text that precedes the appointment title text field. 
     */
    @FXML
    private Label titleLabel;
    /**
     * This is the text field where the user inputs the title for the 
     * new appointment they wish to create. 
     */
    @FXML
    private TextField apptTitleTextField;
    /**
     * This is the header text that precedes the appointment description 
     * text field. 
     */
    @FXML
    private Label descriptionLabel;
    /**
     * This is the text field where the user inputs the description for the 
     * new appointment they wish to create. 
     */
    @FXML
    private TextField apptDescriptionTextField;
    /**
     * This is the header text that precedes the appointment type text field. 
     */
    @FXML
    private Label typeLabel;
    /**
     * This is the text field where the user inputs the type for the 
     * new appointment they wish to create. 
     */
    @FXML
    private TextField apptTypeTextField;
    /**
     * This is the header text that precedes the appointment location text 
     * field. 
     */
    @FXML
    private Label locationLabel;
     /**
     * This is the text field where the user inputs the location for the 
     * new appointment they wish to create. 
     */
    @FXML
    private TextField apptLocationTextField;
    /**
     * This is the header text that precedes the Date Picker that is used 
     * to indicate the new appointment's start date. 
     */
    @FXML
    private Label startDateLabel;
    /**
     * This is the Date Picker where the user inputs the start date for the 
     * new appointment they wish to create. 
     */
    @FXML
    private DatePicker apptStartDateDatePicker;
    /**
     * This is the header text that precedes the appointment start time text 
     * field. 
     */
    @FXML
    private Label startTimeLabel;
     /**
     * This is the text field where the user inputs the start time for the 
     * new appointment they wish to create. 
     */
    @FXML
    private TextField apptStartTimeTextField;
    /**
     * This is the header text that precedes the appointment end time text 
     * field. 
     */
    @FXML
    private Label endTimeLabel;
    /**
     * This is the text field where the user inputs the end time for the 
     * new appointment they wish to create. 
     */
    @FXML
    private TextField apptEndTimeTextField;
    /**
     * This is the label wherein the text asks the user whether or not 
     * the new appointment extends into the next day. 
     */
    @FXML
    private Label endDateQuestionLabel;
    /**
     * A radio button marked "Yes"; if the user selects this, they are 
     * indicating that the appointment does indeed extend into the next 
     * day. 
     */
    @FXML
    private RadioButton endDateDifferentYES_RadioButton;
    /**
     * The toggle group consisting of the endDateDifferentYES_RadioButton and 
     * the endDateDifferentNO_RadioButton; putting these two radio buttons 
     * into the same toggle group ensures that only one of them can be 
     * selected at a time. 
     */
    @FXML
    private ToggleGroup endDateDifferentTG;
    /**
     * A radio button marked "No"; if the user selects this, they are 
     * indicating that the appointment does not extend into the next 
     * day (meaning that the appointment ends on the same date that 
     * it started). 
     */
    @FXML
    private RadioButton endDateDifferentNO_RadioButton;
    /**
     * This is the header text that precedes the combo box used to select 
     * the customer that the new appointment is for. 
     */
    @FXML
    private Label customerLabel;
    /**
     * A combo box (drop-down menu) used to select the customer that this 
     * new appointment is for. 
     */
    @FXML
    private ComboBox<Customers> apptCustomerComboBox;
    /**
     * This is the header text that precedes the combo box used to select 
     * the contact that will be involved in this new appointment. 
     */
    @FXML
    private Label contactLabel;
    /**
     * A combo box (drop-down menu) used to select the contact that will 
     * be involved in this new appointment. 
     */
    @FXML
    private ComboBox<Contacts> apptContactComboBox;
    /**
     * This is the header text that precedes the combo box used to select 
     * the user that is in charge of this new appointment. 
     */
    @FXML
    private Label userInChargeLabel;
    /**
     * A combo box (drop-down menu) used to select the user that is in 
     * charge of this new appointment. 
     */
    @FXML
    private ComboBox<Users> apptUserComboBox;
    /**
     * The button that saves the user-input details as a new 
     * appointment record; it also brings the user back to the Appointments 
     * Table screen. 
     */
    @FXML
    private Button addAppointmentButton;
    /**
     * Brings the user back to the Appointments Table screen (if the user 
     * clicks the button) without creating a new appointment. 
     */
    @FXML
    private Button backButton;
    /**
     * Brings the user back to the Login Screen (if the user 
     * clicks the button) without creating a new appointment. 
     */
    @FXML
    private Button signOutButton;
    
     /**
     * Denotes whether the local language is French or a different language. If 
     * this variable is true, the application gets translated to French; 
     * otherwise (if this variable is false), the application remains in 
     * English. 
     */
    private boolean localLanguageIsFrench = false;
    
    /**
     * An instantiation of the DataHolder class; this is necessary in order to 
     * call the methods that allow the application to switch to a different 
     * scene, as those methods cannot be static (and thus, an instance of the 
     * class is required in order to call those methods). 
     */
    //"DataHolder" is my own class that I created. I wrote a method (function) 
    //there that can be used to switch to a different scene.
    DataHolder methodsLibrary = new DataHolder();
    
    
    
    
    //This method is basically a controller file's equivalent to the "main()" method.
    /**
     * Initializes the controller class. This method links an Observable List 
     * to each of the the three combo boxes on the Add Appointment screen 
     * (the customer combo box, the contact combo box, and the user combo box). 
     * These Observable Lists are what will be displayed in each combo box. 
     * Additionally, this method determines the ZoneId, Locale, and local 
     * language (based on the retrieved Locale) of the current user; using 
     * this information, this method decides whether or not to translate 
     * the Add Appointment screen to French.
     */
    @Override
    public void initialize(URL url, ResourceBundle rb) {
        // TODO
                
        apptCustomerComboBox.setItems(DataHolder.getListOfAllCustomers());
        apptContactComboBox.setItems(DataHolder.getListOfAllContacts());
        apptUserComboBox.setItems(DataHolder.getListOfAllUsers());
        
        //--------------------------------------
        
        //Here, we find out where the current user is located. From that, we can figure out their local language.
        Locale localeOfCurrentUser = DataHolder.getLocaleOfCurrentUser();
        String localLanguage = localeOfCurrentUser.getDisplayLanguage().toString();
        
        //Here, we set everything on the Login Screen to French if the user's local language is French. Otherwise, we keep everything in English.
        if(localLanguage.equals("French") || localeOfCurrentUser.toString().startsWith("fr") || localeOfCurrentUser.getDisplayName().equals("français") ){
            
            localLanguageIsFrench = true;
            translateScreenToFrench();
        }
        
    }
    
    /**
     * This method is called if the user's local language is determined to be 
     * French; it translates all components on the Add Appointments screen 
     * to French. 
     */
    private void translateScreenToFrench(){
        addAppointmentLabel.setText(" AJOUTER UN RENDEZ-VOUS");
        addAppointmentLabel.setFont(new Font("Arial Black", 27));
        backButton.setText("Retourner");
        backButton.setFont(new Font("Segoe UI Semibold", 13));
        signOutButton.setText(" Déloguer");
        identificationNumberLabel.setText("Numéro d'identification");
        apptIdTextField.setPromptText("Genere automatiquement");
        titleLabel.setText("Titre");
        descriptionLabel.setText("Description");
        typeLabel.setText("Taper");
        locationLabel.setText("Lieu");
        startDateLabel.setText("Date de début");
        startTimeLabel.setText("Heure de début");
        endTimeLabel.setText("Heure de fin");
        endDateQuestionLabel.setText("Le rendez-vous se poursuit-il le lendemain?");
        endDateQuestionLabel.setPadding(new Insets(0, 0, 0, 20));
        endDateDifferentYES_RadioButton.setText("Oui");
        endDateDifferentNO_RadioButton.setText("Non");
        customerLabel.setText("Client");
        apptCustomerComboBox.setPromptText("Sélectionnez un client");
        contactLabel.setText("Contact");
        apptContactComboBox.setPromptText("Sélectionnez un contact");
        userInChargeLabel.setText("Utilisateur en charge");
        apptUserComboBox.setPromptText("Sélectionnez un utilisateur");
        addAppointmentButton.setText("Ajouter un rendez-vous");
        addAppointmentButton.setPrefWidth(290);
    }
    
    /**
     * This method is called when the user clicks the "Add Appointment" 
     * button at the bottom of the Add Appointment screen; it saves 
     * the user-input details as a new appointment record (in the database's 
     * Appointments table), and also brings the user back to the Appointments 
     * Table screen. However, before saving the new appointment, this method 
     * checks to make sure that all input is valid; if it is not, a 
     * descriptive error dialog box is output to the user that prompts them 
     * to edit that input (and also gives them pointers on what would be 
     * considered valid input). NOTE: The only input field that is allowed 
     * to remain empty is the "Description" field; that way, if a user 
     * needs to create a new appointment but isn't entirely sure yet about 
     * the specifics of that appointment, they are still able to create 
     * the appointment and can input the description at a later point in 
     * time.
     * @param event The ActionEvent that occurred; in this case, the 
     * "Add Appointment" button was clicked.
     * @throws IOException Thrown by the FXMLLoader's "load()" method (if an 
     * error occurs while loading the desired scene), which is used in the 
     * process of switching screens
     */
    @FXML
    private void onActionAddAppointment(ActionEvent event) throws IOException {
        
        try {
                                   
            //In the next several blocks of code, we are retrieving the values that the user inserted 
            //into each input field (text fields, combo boxes, and radio buttons), and then we are using 
            //all of that data to insert a new record into the database (in the "Appointments" table).

            String appointmentName = apptTitleTextField.getText();
            String appointmentDescription = apptDescriptionTextField.getText();
            String appointmentLocation = apptLocationTextField.getText();
            String appointmentType = apptTypeTextField.getText();

            LocalDate appointmentStartDate = apptStartDateDatePicker.getValue();
            LocalDate appointmentEndDate = appointmentStartDate; //I had to initialize this variable, so that's why I set it equal to something here.
            if(endDateDifferentNO_RadioButton.isSelected()){
                appointmentEndDate = appointmentStartDate;
            } else if (endDateDifferentYES_RadioButton.isSelected()){
                appointmentEndDate = appointmentStartDate.plusDays(1);
            }

            String appointmentStartTime = apptStartTimeTextField.getText();
            LocalTime apptStartTimeLocalTimeVar = LocalTime.parse(appointmentStartTime);
            
            String appointmentEndTime = apptEndTimeTextField.getText();
            LocalTime apptEndTimeLocalTimeVar = LocalTime.parse(appointmentEndTime);

            Customers customerInvolved = apptCustomerComboBox.getValue();
            int idOfCustomerInvolved = customerInvolved.getCustomerID();

            Contacts contactInvolved = apptContactComboBox.getValue();
            int idOfContactInvolved = contactInvolved.getContactID();

            Users userInCharge = apptUserComboBox.getValue();
            int idOfUserInCharge = userInCharge.getUserID();
            
            //------------------------------------------------------------------
            
            //The next few blocks of code deal with the start datetime and end datetime of the 
            //appointment that the user wants to schedule. It converts those datetimes from 
            //the user's local time zone to EST. This is because, after this (in the giant 
            //"if" statement that follows), we will error-check to make sure that the 
            //appointment's start and end times are not outside of the company's 
            //business hours (which are 8 a.m. to 10 p.m. EST).
            
            LocalDateTime appointmentStartDateAndTime = appointmentStartDate.atTime(apptStartTimeLocalTimeVar);
            LocalDateTime appointmentEndDateAndTime = appointmentEndDate.atTime(apptEndTimeLocalTimeVar);
            
            ZoneId zoneIdOfUser = ZoneId.systemDefault();
            ZoneId zoneIdOfCompanysBusinessHours = ZoneId.of("Etc/GMT+5"); //EST is GMT minus 5 hours, which is written as "GMT+5" for some reason in code
            
            LocalDateTime startDateAndTimeConvertedToEST =  appointmentStartDateAndTime.atZone(zoneIdOfUser)
                                                                                       .withZoneSameInstant(zoneIdOfCompanysBusinessHours)
                                                                                       .toLocalDateTime();
            
            LocalDateTime endDateAndTimeConvertedToEST =  appointmentEndDateAndTime.atZone(zoneIdOfUser)
                                                                                   .withZoneSameInstant(zoneIdOfCompanysBusinessHours)
                                                                                   .toLocalDateTime();
            
            LocalTime appointmentStartTimeInEST = startDateAndTimeConvertedToEST.toLocalTime();
            LocalTime appointmentEndTimeInEST = endDateAndTimeConvertedToEST.toLocalTime();
            LocalTime openingTimeOfCompanyInEST = LocalTime.parse("08:00:00");
            LocalTime closingTimeOfCompanyInEST = LocalTime.parse("22:00:00");
            
            //This was just some test code that I used to test the functionality of the user's-time-zone-to-EST-conversion.
            //System.out.println("User input -----------  Start: " + apptStartTimeLocalTimeVar + " End: " + apptEndTimeLocalTimeVar);
            //System.out.println("Same times in EST ----  Start: " + appointmentStartTimeInEST + " End: " + appointmentEndTimeInEST);
            
            //These variables are for later, in the giant if/else statement. Basically, if these two 
            //variables are different (implying, from the way I've written my code and set up the 
            //program, that the end date is the day after the start date), then we output an error. 
            //Because these two dates have been converted to EST, we never want these two variables 
            //to have different values -- this is because we never want to have overnight appointments.
            //This differs from the fact that we allow the *user* to input an end date that is the day 
            //after the start date; this is because in the user's time zone, they may have to indicate 
            //that the end of the appointment is on a different day (and this is fine as long as the 
            //appointment starts and ends on the same day in EST).
            LocalDate startDateOfAppointmentInEST = startDateAndTimeConvertedToEST.toLocalDate();
            LocalDate endDateOfAppointmentInEST = endDateAndTimeConvertedToEST.toLocalDate();
            
            //------------------------------------------------------------------
            
            boolean thereIsAnInputError = false;
            
            if(appointmentName.equals("")){
                
                thereIsAnInputError = true;
                
                if(localLanguageIsFrench){
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nVeuillez fournir un titre pour le rendez-vous.\n\n");
                    alert.setTitle("Aucun titre fourni");
                    alert.showAndWait();
                } else {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nPlease provide a title for the appointment.\n\n");
                    alert.setTitle("No Title Provided");
                    alert.showAndWait();
                }                
                
            } else if (appointmentType.equals("")){
                
                thereIsAnInputError = true;
                
                if(localLanguageIsFrench){
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nVeuillez indiquer un type de rendez-vous.\n\n");
                    alert.setTitle("Aucun emplacement fourni");
                    alert.showAndWait();
                } else {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nPlease indicate a type for the appointment.\n\n");
                    alert.setTitle("No Location Provided");
                    alert.showAndWait();
                }
                                
            } else if (appointmentLocation.equals("")){
                
                thereIsAnInputError = true;
                
                if(localLanguageIsFrench){
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nVeuillez indiquer un lieu pour le rendez-vous.\n\n");
                    alert.setTitle("Aucun emplacement fourni");
                    alert.showAndWait();
                } else {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nPlease provide a location for the appointment.\n\n");
                    alert.setTitle("No Location Provided");
                    alert.showAndWait();
                }
                                
            } else if (appointmentStartDate == null){
                
                thereIsAnInputError = true;
                
                if(localLanguageIsFrench){
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nMerci de préciser une date de rendez-vous.\n\n");
                    alert.setTitle("Aucune date fournie");
                    alert.showAndWait();
                } else {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nPlease provide a date for the appointment.\n\n");
                    alert.setTitle("No Date Provided");
                    alert.showAndWait();
                }
                                
            } else if (appointmentStartTime.equals("")){
                
                thereIsAnInputError = true;
                
                if(localLanguageIsFrench){
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nVeuillez indiquer une heure de début de rendez-vous.\n\n");
                    alert.setTitle("Aucune heure de début fournie");
                    alert.showAndWait();
                } else {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nPlease provide a start time for the appointment.\n\n");
                    alert.setTitle("No Start Time Provided");
                    alert.showAndWait();
                }
                                
            } else if (appointmentEndTime.equals("")){
                
                thereIsAnInputError = true;
                
                if(localLanguageIsFrench){
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nVeuillez indiquer une heure de fin pour le rendez-vous.\n\n");
                    alert.setTitle("Aucune heure de fin fournie");
                    alert.showAndWait();
                } else {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nPlease provide an end time for the appointment.\n\n");
                    alert.setTitle("No End Time Provided");
                    alert.showAndWait();
                }
                                
            } else if (appointmentName.length() > 50){
                
                thereIsAnInputError = true;
                
                if(localLanguageIsFrench){
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nLe titre du rendez-vous ne peut pas dépasser 50 caractères.\n\n");
                    alert.setTitle("Limite de 50 caractères");
                    alert.showAndWait();
                } else {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nThe appointment's Title cannot be longer than 50 characters.\n\n");
                    alert.setTitle("50 Character Limit");
                    alert.showAndWait();
                }
                                
            } else if (appointmentDescription.length() > 50){
                
                thereIsAnInputError = true;
                
                if(localLanguageIsFrench){
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nLa description du rendez-vous ne peut pas dépasser 50 caractères.\n\n");
                    alert.setTitle("Limite de 50 caractères");
                    alert.showAndWait();
                } else {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nThe appointment's Description cannot be longer than 50 characters.\n\n");
                    alert.setTitle("50 Character Limit");
                    alert.showAndWait();
                }
                                
            } else if (appointmentType.length() > 50){
                
                thereIsAnInputError = true;
                
                if(localLanguageIsFrench){
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nLe Type du rendez-vous ne peut pas dépasser 50 caractères.\n\n");
                    alert.setTitle("Limite de 50 caractères");
                    alert.showAndWait();
                } else {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nThe appointment's Type cannot be longer than 50 characters.\n\n");
                    alert.setTitle("50 Character Limit");
                    alert.showAndWait();
                }
                                
            } else if (appointmentLocation.length() > 50){
                
                thereIsAnInputError = true;
                
                if(localLanguageIsFrench){
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nL'emplacement du rendez-vous ne peut pas dépasser 50 caractères.\n\n");
                    alert.setTitle("Limite de 50 caractères");
                    alert.showAndWait();
                } else {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nThe appointment's Location cannot be longer than 50 characters.\n\n");
                    alert.setTitle("50 Character Limit");
                    alert.showAndWait();
                }
                                
            } else if ( !endDateDifferentYES_RadioButton.isSelected() && !endDateDifferentNO_RadioButton.isSelected() ){
                
                thereIsAnInputError = true;
                
                if(localLanguageIsFrench){
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nVeuillez indiquer si le rendez-vous se poursuit ou non le lendemain.\n\n");
                    alert.setTitle("Date de fin non indiquée");
                    alert.showAndWait();
                } else {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nPlease indicate whether or not the appointment continues into the next day.\n\n");
                    alert.setTitle("End Date Not Indicated");
                    alert.showAndWait();
                }
                                
            } else if ( apptEndTimeLocalTimeVar.isBefore(apptStartTimeLocalTimeVar) && endDateDifferentNO_RadioButton.isSelected() ){
                
                thereIsAnInputError = true;
                
                if(localLanguageIsFrench){
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nÉtant donné que le rendez-vous ne se prolonge pas jusqu'au lendemain, " + 
                                                                   "l'heure de fin doit être supérieure à l'heure de début.\n\n");
                    alert.setTitle("L'heure de fin doit être postérieure à l'heure de début");
                    alert.showAndWait();
                } else {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nSince the appointment does not extend into the next day, " + 
                                                                   "the end time must be greater than the start time.\n\n");
                    alert.setTitle("End Time Must Be After Start Time");
                    alert.showAndWait();
                }
                                
            } else if ( (appointmentStartTimeInEST.isBefore(openingTimeOfCompanyInEST) || appointmentStartTimeInEST.isAfter(closingTimeOfCompanyInEST))
                       && (appointmentEndTimeInEST.isBefore(openingTimeOfCompanyInEST) || appointmentEndTimeInEST.isAfter(closingTimeOfCompanyInEST)) ){
                
                thereIsAnInputError = true;
                
                if(localLanguageIsFrench){
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nLes rendez-vous ne peuvent pas avoir lieu en dehors des heures de bureau\n" + 
                                                                   "( 08:00 - 22:00  heure normale de l'Est ).\n\n" + 
                                                                   "Veuillez ajuster l'heure de début et l'heure de fin du rendez-vous.\n\n");
                    alert.setTitle("Heure invalide");
                    alert.showAndWait();
                } else {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nAppointments cannot take place outside of business hours\n" + 
                                                                   "( 08:00 - 22:00  Eastern Standard Time ).\n\n" + 
                                                                   "Please adjust the appointment's Start Time and End Time.\n\n");
                    alert.setTitle("Invalid Time");
                    alert.showAndWait();
                }
                                
            } else if ( appointmentStartTimeInEST.isBefore(openingTimeOfCompanyInEST) || appointmentStartTimeInEST.isAfter(closingTimeOfCompanyInEST) ){
                
                thereIsAnInputError = true;
                
                if(localLanguageIsFrench){
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nLes rendez-vous ne peuvent pas avoir lieu en dehors des heures de bureau\n" + 
                                                                   "( 08:00 - 22:00  heure normale de l'Est ).\n\n" + 
                                                                   "Veuillez ajuster l'heure de début du rendez-vous.\n\n");
                    alert.setTitle("Heure de début invalide");
                    alert.showAndWait();
                } else {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nAppointments cannot take place outside of business hours\n" + 
                                                                   "( 08:00 - 22:00  Eastern Standard Time ).\n\n" + 
                                                                   "Please adjust the appointment's Start Time.\n\n");
                    alert.setTitle("Invalid Start Time");
                    alert.showAndWait();
                }
                                
            } else if ( appointmentEndTimeInEST.isBefore(openingTimeOfCompanyInEST) || appointmentEndTimeInEST.isAfter(closingTimeOfCompanyInEST) ){
                
                thereIsAnInputError = true;
                
                if(localLanguageIsFrench){
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nLes rendez-vous ne peuvent pas avoir lieu en dehors des heures de bureau\n" + 
                                                                   "( 08:00 - 22:00  heure normale de l'Est ).\n\n" + 
                                                                   "Veuillez ajuster l'heure de fin du rendez-vous.\n\n");
                    alert.setTitle("Heure de fin non valide");
                    alert.showAndWait();
                } else {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nAppointments cannot take place outside of business hours\n" + 
                                                                   "( 08:00 - 22:00  Eastern Standard Time ).\n\n" + 
                                                                   "Please adjust the appointment's End Time.\n\n");
                    alert.setTitle("Invalid End Time");
                    alert.showAndWait();
                }
                                
            } else if ( endDateOfAppointmentInEST.isEqual(startDateOfAppointmentInEST.plusDays(1)) ){
                
                thereIsAnInputError = true;
                
                if(localLanguageIsFrench){
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nLes rendez-vous ne peuvent pas avoir lieu en dehors des heures de bureau\n" + 
                                                                   "( 08:00 - 22:00  heure normale de l'Est ).\n\n" + 
                                                                   "Bien que l'heure de début et l'heure de fin de ce rendez-vous se " + 
                                                                   "situent pendant les heures ouvrables, une partie intermédiaire du " + 
                                                                   "rendez-vous a lieu *en dehors* des heures ouvrables.\n\n" + 
                                                                   "Veuillez ajuster l'heure de fin ou la date de fin du rendez-vous " + 
                                                                   "afin que le rendez-vous ne dépasse pas la fin des heures ouvrables.\n\n");
                    alert.setTitle("Heure invalide");
                    alert.showAndWait();
                } else {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "\nAppointments cannot take place outside of business hours\n" + 
                                                                   "( 08:00 - 22:00  Eastern Standard Time ).\n\n" + 
                                                                   "Although the start time and end time of this appointment are within " + 
                                                                   "business hours, an intervening portion of the appointment occurs " + 
                                                                   "*outside* of business hours.\n\n" + 
                                                                   "Please adjust the appointment's End Time or End Date " + 
                                                                   "so that the appointment does not extend past the end of business hours.\n\n");
                    alert.setTitle("Invalid Time");
                    alert.showAndWait();
                }
                
            }
            
            //------------------------------------------------------------------
            
            //This if statement will check whether there are any overlapping appointments 
            //(for the particular customer that the user is currently trying to create 
            //an appointment for). If so, an error is output to the UI.
            if(!thereIsAnInputError){
                
                ObservableList<Appointments> listOfAnyOverlappingAppointments = AppointmentsCRUD.getAnyOverlappingAppointmentsFromDatabase(appointmentStartDateAndTime, 
                                                                                                                                           appointmentEndDateAndTime, 
                                                                                                                                           idOfCustomerInvolved);
                //There's a possibility that the list could be equal to null (meaning it was 
                //uninitialized), which is why I have to check whether the list is equal to 
                //null or not before doing anything else with list (including checking the 
                //size, which would throw an exception if the list does equal to null).
                if(listOfAnyOverlappingAppointments != null){
                    
                    //If there's only one overlapping appointment, the error that's output to the user uses singular grammar (versus plural).
                    if(listOfAnyOverlappingAppointments.size() == 1){
                        
                        
                        thereIsAnInputError = true;
                        
                        try
                        {
                            StringBuilder infoAboutEachOverlappingAppointment = new StringBuilder();
                        
                            for(Appointments appointment: listOfAnyOverlappingAppointments){
                                
                                if(localLanguageIsFrench){
                                    infoAboutEachOverlappingAppointment.append("•  " + "ID:  #" + appointment.getAppointmentID() + "   |   " + "TITRE:  \"" + 
                                                                                                  appointment.getAppointmentName() + "\"" + "\n" + 
                                                                               "   HEURE DE DÉBUT:  " + appointment.getAppointmentStartDateAndTimeInDMYand24HourTime() + 
                                                                               "\n   HEURE DE FIN:  " + appointment.getAppointmentEndDateAndTimeInDMYand24HourTime() + 
                                                                               "\n\n");
                                } else {
                                    infoAboutEachOverlappingAppointment.append("•  " + "ID:  #" + appointment.getAppointmentID() + "   |   " + "TITLE:  \"" + 
                                                                                                  appointment.getAppointmentName() + "\"" + "\n" + 
                                                                               "   START TIME:  " + appointment.getAppointmentStartDateAndTimeInMDYand12HourTime() + 
                                                                               "\n   END TIME:  " + appointment.getAppointmentEndDateAndTimeInMDYand12HourTime() + 
                                                                               "\n\n");
                                }
                                
                            }

                            
                            if(localLanguageIsFrench){
                                Alert alert = new Alert(Alert.AlertType.ERROR, "\nLe client sélectionné, " + customerInvolved.getCustomerName() + 
                                                                               " (ID: #" + customerInvolved.getCustomerID() + 
                                                                               "), a déjà un rendez-vous qui a lieu pendant la période spécifiée.\n\n" + 
                                                                               "Le rendez-vous qui se chevauche est le suivant:\n\n" + 
                                                                                 infoAboutEachOverlappingAppointment.toString());
                                alert.setTitle("Chevauchement de rendez-vous");
                                alert.showAndWait();
                            } else {
                                Alert alert = new Alert(Alert.AlertType.ERROR, "\nThe selected customer, " + customerInvolved.getCustomerName() + 
                                                                               " (ID: #" + customerInvolved.getCustomerID() + 
                                                                               "), already has an appointment that occurs during the specified time frame.\n\n" + 
                                                                               "The overlapping appointment is as follows:\n\n" + 
                                                                                 infoAboutEachOverlappingAppointment.toString());
                                alert.setTitle("Overlapping Appointment");
                                alert.showAndWait();
                            }
                            
                        }
                        catch(OutOfMemoryError error){
                            
                            if(localLanguageIsFrench){
                                Alert alert = new Alert(Alert.AlertType.ERROR, "\nLe client sélectionné, " + customerInvolved.getCustomerName() + 
                                                                               " (ID: #" + customerInvolved.getCustomerID() + 
                                                                               "), a déjà un rendez-vous qui a lieu pendant la période spécifiée.\n\n");
                                alert.setTitle("Chevauchement de rendez-vous");
                                alert.showAndWait();
                            } else {
                                Alert alert = new Alert(Alert.AlertType.ERROR, "\nThe selected customer, " + customerInvolved.getCustomerName() + 
                                                                               " (ID: #" + customerInvolved.getCustomerID() + 
                                                                               "), already has an appointment that occurs during the specified time frame.\n\n");
                                alert.setTitle("Overlapping Appointment");
                                alert.showAndWait();
                            }
                            
                        }
                        
                        
                    //If there's more than one overlapping appointment, the error that's output to the user uses plural grammar (versus singular).    
                    } else if (listOfAnyOverlappingAppointments.size() > 1){
                        
                        thereIsAnInputError = true;
                        
                        try 
                        {
                            StringBuilder infoAboutEachOverlappingAppointment = new StringBuilder();
                        
                            for(Appointments appointment: listOfAnyOverlappingAppointments){
                                
                                if(localLanguageIsFrench){
                                    infoAboutEachOverlappingAppointment.append("•  " + "ID:  #" + appointment.getAppointmentID() + "   |   " + "TITRE:  \"" + 
                                                                                                  appointment.getAppointmentName() + "\"" + "\n" + 
                                                                               "   HEURE DE DÉBUT:  " + appointment.getAppointmentStartDateAndTimeInDMYand24HourTime() + 
                                                                               "\n   HEURE DE FIN:  " + appointment.getAppointmentEndDateAndTimeInDMYand24HourTime() + 
                                                                               "\n\n");
                                } else {
                                    infoAboutEachOverlappingAppointment.append("•  " + "ID:  #" + appointment.getAppointmentID() + "   |   " + "TITLE:  \"" + 
                                                                                                  appointment.getAppointmentName() + "\"" + "\n" + 
                                                                               "   START TIME:  " + appointment.getAppointmentStartDateAndTimeInMDYand12HourTime() + 
                                                                               "\n   END TIME:  " + appointment.getAppointmentEndDateAndTimeInMDYand12HourTime() + 
                                                                               "\n\n");
                                }
                                
                            }

                            
                            if(localLanguageIsFrench){
                                Alert alert = new Alert(Alert.AlertType.ERROR, "\nLe client sélectionné, " + customerInvolved.getCustomerName() + 
                                                                               " (ID: #" + customerInvolved.getCustomerID() + 
                                                                               "), a déjà des rendez-vous qui se produisent pendant la période spécifiée.\n\n" + 
                                                                               "Les rendez-vous qui se chevauchent sont répertoriés comme suit:\n\n" + 
                                                                                infoAboutEachOverlappingAppointment.toString());
                                alert.setTitle("Rendez-vous qui se chevauchent");
                                alert.showAndWait();
                            } else {
                                Alert alert = new Alert(Alert.AlertType.ERROR, "\nThe selected customer, " + customerInvolved.getCustomerName() + 
                                                                               " (ID: #" + customerInvolved.getCustomerID() + 
                                                                               "), already has appointments that occur during the specified time frame.\n\n" + 
                                                                               "The overlapping appointments are listed as follows:\n\n" + 
                                                                                infoAboutEachOverlappingAppointment.toString());
                                alert.setTitle("Overlapping Appointments");
                                alert.showAndWait();
                            }
                            
                        }
                        catch(OutOfMemoryError error){
                            
                            if(localLanguageIsFrench){
                                Alert alert = new Alert(Alert.AlertType.ERROR, "\nLe client sélectionné, " + customerInvolved.getCustomerName() + 
                                                                               " (ID: #" + customerInvolved.getCustomerID() + 
                                                                               "), a déjà des rendez-vous qui se produisent pendant la période spécifiée.\n\n");
                                alert.setTitle("Rendez-vous qui se chevauchent");
                                alert.showAndWait();
                            } else {
                                Alert alert = new Alert(Alert.AlertType.ERROR, "\nThe selected customer, " + customerInvolved.getCustomerName() + 
                                                                               " (ID: #" + customerInvolved.getCustomerID() + 
                                                                               "), already has appointments that occur during the specified time frame.\n\n");
                                alert.setTitle("Overlapping Appointments");
                                alert.showAndWait();
                            }
                        }
                        
                    }
                    
                }
            }
            
            //------------------------------------------------------------------
            
            if(!thereIsAnInputError){
                
                AppointmentsCRUD.addAppointmentToDatabase(appointmentName, appointmentDescription, appointmentLocation, appointmentType, 
                                                        appointmentStartDate, appointmentEndDate, appointmentStartTime, appointmentEndTime, 
                                                        idOfCustomerInvolved, idOfUserInCharge, idOfContactInvolved);
                
                methodsLibrary.switchToDifferentSceneUsingButton("/view/AppointmentsTable.fxml", event);
            }
                       
            
        }
        catch(NullPointerException error){
            
            if(localLanguageIsFrench){
                Alert alert = new Alert(Alert.AlertType.ERROR, "\nVeuillez vous assurer d'avoir fourni une date pour le rendez-vous " + 
                                                               "ainsi qu'une sélection dans chacun des menus déroulants.\n\n");
                alert.setTitle("Entrée manquante");
                alert.showAndWait();
            } else {
                Alert alert = new Alert(Alert.AlertType.ERROR, "\nPlease ensure that you have provided a date for the appointment " + 
                                                               "as well as a selection from each of the drop-down menus.\n\n");
                alert.setTitle("Missing Input");
                alert.showAndWait();
            }
            
        }
        catch(DateTimeParseException error){
            
            if(localLanguageIsFrench){
                Alert alert = new Alert(Alert.AlertType.ERROR, "\nVeuillez fournir l'heure de début et l'heure de fin " + 
                                                               "au format \"HH:MM\" (heure sur 24 heures).\n\n");
                alert.setTitle("Entrée manquante ou mal formatée");
                alert.showAndWait();
            } else {
                Alert alert = new Alert(Alert.AlertType.ERROR, "\nPlease provide the Start Time and End Time " + 
                                                               "in the format \"HH:MM\" (24-hour time).\n\n");
                alert.setTitle("Missing or Improperly-Formatted Input");
                alert.showAndWait();
            }
            
        }
        
    }
    
    /**
     * This method gets called whenever the "Back" button on the Add 
     * Appointments screen is clicked by the user; first, a confirmation 
     * dialog box is output to the user (asking the user if they are sure 
     * they want to leave the "Add Appointment" screen without saving 
     * their input); if they click "OK", this method switches the visible 
     * screen back to the "Appointments Table" screen. 
     * @param event The ActionEvent that occurred; in this case, the "Back" 
     * button was clicked.
     * @throws IOException Thrown by the FXMLLoader's "load()" method (if an 
     * error occurs while loading the desired scene), which is used in the 
     * process of switching screens
     */
    @FXML
    private void onActionDisplayAppointmentsTable(ActionEvent event) throws IOException {
        
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        
        if(localLanguageIsFrench){
            alert.setTitle("Données non enregistrées");
            alert.setContentText("\nToute entrée sur cette page n'est pas enregistrée et sera perdue.\n\nÊtes-vous sûr de vouloir quitter?\n\n");
        } else {
            alert.setTitle("Unsaved Data");
            alert.setContentText("\nAny input on this page is unsaved and will be lost.\n\nAre you sure you want to leave?\n\n");
        }
        
        //This variable will hold whichever button the user clicks (since CONFIRMATION dialog 
        //boxes have both an "OK" button as well as a "CANCEL" button). NOTE: It's also possible 
        //for the user to click no button at all, since dialog boxes come with an "X" on the top 
        //right, which can be used to exit out of the dialog box.
        Optional<ButtonType> buttonClickedByUser = alert.showAndWait();
        
        //If the user clicked a button and that button is "OK", then we will sign the user out 
        //(a.k.a. switch the display to the login screen).
        if( buttonClickedByUser.isPresent() && buttonClickedByUser.get().equals(ButtonType.OK) ){
            
            methodsLibrary.switchToDifferentSceneUsingButton("/view/AppointmentsTable.fxml", event);
        }
        
    }
    
    
    /**
     * This method gets called whenever the "Sign out" button on the 
     * Add Appointment screen is clicked by the user; it outputs a 
     * confirmation dialog box asking the user if they are sure they want to 
     * sign out, and if the user confirms, then this method switches the 
     * visible screen to be the Login Screen once again. 
     * @param event The ActionEvent that occurred; in this case, the "Sign out" 
     * button was clicked.
     * @throws IOException Thrown by the FXMLLoader's "load()" method (which 
     * is used in the process of switching screens); the exception is only 
     * thrown if an error occurs while loading the desired scene.
     */
    @FXML
    private void onActionDisplayLoginScreen(ActionEvent event) throws IOException {
        
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        
        if(localLanguageIsFrench){
            alert.setTitle("Confirmation de déconnexion");
            alert.setContentText("\nToute entrée sur cette page n'est pas enregistrée et sera perdue.\n\n" + 
                                 "Êtes-vous certain de vouloir vous déconnecter?\n\n");
        } else {
            alert.setTitle("Sign Out Confirmation");
            alert.setContentText("\nAny input on this page is unsaved and will be lost.\n\n" + 
                                 "Are you sure you want to sign out?\n\n");
        }
        
        //This variable will hold whichever button the user clicks (since CONFIRMATION dialog 
        //boxes have both an "OK" button as well as a "CANCEL" button). NOTE: It's also possible 
        //for the user to click no button at all, since dialog boxes come with an "X" on the top 
        //right, which can be used to exit out of the dialog box.
        Optional<ButtonType> buttonClickedByUser = alert.showAndWait();
        
        //If the user clicked a button and that button is "OK", then we will sign the user out 
        //(a.k.a. switch the display to the login screen).
        if( buttonClickedByUser.isPresent() && buttonClickedByUser.get().equals(ButtonType.OK) ){
            
            methodsLibrary.switchToDifferentSceneUsingButton("/view/LoginScreen.fxml", event);
        }
        
        
    }
    
}
